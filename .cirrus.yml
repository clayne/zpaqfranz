# Build per macOS Apple Silicon (ARM64/M1/M2/M3)
macos_arm64_task:
  name: Build on macOS Apple Silicon (ARM64)
  macos_instance:
    image: ghcr.io/cirruslabs/macos-runner:sonoma
  install_script:
    - brew update
    - brew install gcc zlib
    # Usa il gcc di Homebrew per ARM64
    - export PATH="$(brew --prefix gcc)/bin:$PATH"
    - gcc --version
    - uname -m  # Dovrebbe mostrare arm64
  compile_script:
    - $(brew --prefix gcc)/bin/g++ -Dunix -DSFTP -DHWSHA2 -arch arm64 zpaqfranz.cpp -o zpaqfranz-arm64 -pthread -std=c++11 -Wall -Wpedantic -lz 2>&1 | tee build_report.txt
  test_script:
    - ./zpaqfranz-arm64 autotest
  always:
    report_artifacts:
      path: build_report.txt
    executable_artifacts:
      path: zpaqfranz-arm64

# Build per macOS Intel (x86_64)
macos_intel_task:
  name: Build on macOS Intel (x86_64)
  macos_instance:
    image: ghcr.io/cirruslabs/macos-runner:sonoma
  install_script:
    - brew update
    - brew install gcc zlib
    - export PATH="$(brew --prefix gcc)/bin:$PATH"
    - gcc --version
  compile_script:
    # Forza compilazione per x86_64 anche su Apple Silicon
    - $(brew --prefix gcc)/bin/g++ -Dunix -DSFTP -DHWSHA2 -arch x86_64 zpaqfranz.cpp -o zpaqfranz-intel -pthread -std=c++11 -Wall -Wpedantic -lz 2>&1 | tee build_report.txt
  test_script:
    # Test sotto Rosetta se siamo su Apple Silicon
    - if [[ $(uname -m) == "arm64" ]]; then arch -x86_64 ./zpaqfranz-intel autotest; else ./zpaqfranz-intel autotest; fi
  always:
    report_artifacts:
      path: build_report.txt
    executable_artifacts:
      path: zpaqfranz-intel

# Build Universale (Fat Binary) - Funziona su entrambe le architetture
macos_universal_task:
  name: Build macOS Universal Binary
  macos_instance:
    image: ghcr.io/cirruslabs/macos-runner:sonoma
  install_script:
    - brew update
    - brew install gcc zlib
    - export PATH="$(brew --prefix gcc)/bin:$PATH"
    - gcc --version
  compile_script:
    # Compila per ARM64
    - $(brew --prefix gcc)/bin/g++ -Dunix -DSFTP -DHWSHA2 -arch arm64 zpaqfranz.cpp -o zpaqfranz-arm64 -pthread -std=c++11 -Wall -Wpedantic -lz 2>&1 | tee build_report_arm64.txt
    # Compila per Intel
    - $(brew --prefix gcc)/bin/g++ -Dunix -DSFTP -DHWSHA2 -arch x86_64 zpaqfranz.cpp -o zpaqfranz-intel -pthread -std=c++11 -Wall -Wpedantic -lz 2>&1 | tee build_report_intel.txt
    # Crea il binario universale
    - lipo -create -output zpaqfranz-universal zpaqfranz-arm64 zpaqfranz-intel
    # Verifica il binario universale
    - lipo -info zpaqfranz-universal | tee build_report.txt
    - file zpaqfranz-universal >> build_report.txt
  test_script:
    # Test del binario universale
    - ./zpaqfranz-universal autotest
    # Verifica che funzioni sotto entrambe le architetture
    - if [[ $(uname -m) == "arm64" ]]; then arch -x86_64 ./zpaqfranz-universal autotest; fi
  always:
    report_artifacts:
      path: build_report.txt
    executable_artifacts:
      path: zpaqfranz-universal

# Build ottimizzato per Apple Silicon con ottimizzazioni native
macos_arm64_optimized_task:
  name: Build macOS ARM64 Optimized
  macos_instance:
    image: ghcr.io/cirruslabs/macos-runner:sonoma
  install_script:
    - brew update
    - brew install gcc zlib
    - export PATH="$(brew --prefix gcc)/bin:$PATH"
  compile_script:
    # Ottimizzazioni specifiche per Apple Silicon
    - $(brew --prefix gcc)/bin/g++ -Dunix -DSFTP -DHWSHA2 -arch arm64 -mcpu=apple-m1 -O3 -flto zpaqfranz.cpp -o zpaqfranz-arm64-opt -pthread -std=c++11 -Wall -Wpedantic -lz 2>&1 | tee build_report.txt
  test_script:
    - ./zpaqfranz-arm64-opt autotest
  always:
    report_artifacts:
      path: build_report.txt
    executable_artifacts:
      path: zpaqfranz-arm64-opt

# Build con Clang (compiler nativo di macOS)
macos_clang_task:
  name: Build macOS with Clang
  macos_instance:
    image: ghcr.io/cirruslabs/macos-runner:sonoma
  install_script:
    - brew update
    - brew install zlib
    - clang++ --version
  compile_script:
    # Usa Clang nativo di macOS
    - clang++ -Dunix -DSFTP -DHWSHA2 zpaqfranz.cpp -o zpaqfranz-clang -pthread -std=c++11 -Wall -Wpedantic -lz 2>&1 | tee build_report.txt
  test_script:
    - ./zpaqfranz-clang autotest
  always:
    report_artifacts:
      path: build_report.txt
    executable_artifacts:
      path: zpaqfranz-clang

# Build per macOS con supporto Xcode (se necessario)
macos_xcode_task:
  name: Build macOS with Xcode
  macos_instance:
    image: ghcr.io/cirruslabs/macos-runner:sonoma
  install_script:
    - brew update
    - brew install zlib
    # Assicurati che Xcode command line tools siano installati
    - xcode-select --install || true
    - xcrun --show-sdk-path
  compile_script:
    # Usa xcrun per invocare clang con SDK corretto
    - xcrun clang++ -Dunix -DSFTP -DHWSHA2 zpaqfranz.cpp -o zpaqfranz-xcode -pthread -std=c++11 -Wall -Wpedantic -lz 2>&1 | tee build_report.txt
  test_script:
    - ./zpaqfranz-xcode autotest
  always:
    report_artifacts:
      path: build_report.txt
    executable_artifacts:
      path: zpaqfranz-xcode
